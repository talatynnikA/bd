Транзакция - это механизм базы данных, позволяющий таким образом объединять несколько операторов, изменяющих базу данных, чтобы при выполнении этой совокупности операторов они или все выполнились или все не выполнились. 

Основные свойства транзакции: 
	атомарность - операторы изменения БД, включенные в транзакцию, либо выполнятся все, либо не выполнится ни один; 
	согласованность - транзакция должна фиксировать новое согласованное состояние БД; 
	изолированность - отсутствие взаимного влияния параллельных транзакций на результаты их выполнения; 
	долговечность - изменения в БД, выполненные и зафиксированные транзакцией, могут быть отменены только с помощью новой транзакции.

Неявная транзакция — задает любую отдельную инструкцию INSERT, UPDATE или DELETE как единицу транзакции
	Режим неявной транзакции может быть включен/выключен для текущего соединения с сервером БД с помощью специальной инструкции: 
	SET IMPLICIT_TRANSACTIONS ON/OFF
	Неявная транзакция начинается, если выполняется один из следующих операторов: REATE, DROP; ALTER TABLE; INSERT, DELETE, UPDATE, SELECT, TRUNCATE TABLE; OPEN, FETCH; GRANT (выдача разрешений), REVOKE (запрещение разрешений). 
	Неявная транзакция продолжается до тех пор, пока не будет выполнен оператор фиксации (COMMIT) или оператор отката (ROLLBACK) транзакции.

Явная транзакция - группа инструкций, начало и конец которой обозначаются инструкциями: BEGIN TRANSACTION, COMMIT/ROLLBACK
После завершения явной транзакции происходит возврат в исходный режим (автофиксации или неявной транзакции). 

SAVE TRANSACTION - Точка сохранения определяет точку в транзакции, такую что все последующие изменения данных могут быть отменены без отмены всей транзакции 
SAVE TRANSACTION создает метку для последующей инструкции ROLLBACK, имеющей такую же метку, как и данная инструкция SAVE TRANSACTION

@@TRANCOUNT - Системная функция @@TRANCOUNT возвращает уровень вложенности транзакции. (ес-ли значение больше нуля, то транзакция не завершена). 

Пессимистический одновременный конкурентный доступ - предполагается, что между процессами в любое время может возникнуть конфликт и ресурс блокируется
Оптимистический одновременный конкурентный доступ - предполагается, что одновременное изменение данных маловероятно

Проблемы:
	Потеря обновлений - Несколько транзакций одновременно могут считывать и обновлять одни и те же данные; Теряются все обновления данных, за исключением обновлений, выполненных последней транзакцией
	Грязное чтение - Происходит чтение несуществующих данных или потеря модифицированных данных
	Неповторяющееся чтение - Одна транзакция читает данные несколько раз, а другая изменяет те же данные между двумя операциями чтения в первом процессе. По этой причине данные, прочитанные в различных операциях, будут разными.
	Фантомное чтение - Две последовательные операции чтения могут получать различные значения, т. к. дополнительные строки, называемые фантом¬ными, могут добавляться други-ми транзакциями.

@@SPID возвращает системный идентификатор процесса, назначенный сервером текущему подключению.

READ UNCOMMITTED - Не изолирует операции чтения других транзакций, Транзакция не задает и не признает блокировок
	
READ COMMITTED - Транзакция выполняет проверку только на наличие монопольной блокировки для данной строки, является уровнем изоляции по умолчанию

REPEATABLE READ - Устанавливает разделяемые блокировки на все считываемые данные и удерживает эти блокировки до тех пор, пока транзакция не будет подтверждена или отменена. Не препятствует другим инструкциям вставлять новые строки
 
SERIALIZABLE - Устанавливает блокировку на всю область данных, считываемых соответствующей транзакцией. Предотвращает вставку новых строк другой транзакцией до тех пор, пока первая транзакция не будет подтверждена или отменена

Неподтвержденное чтение - До момента t1 транзакцией B выполняются два оператора: INSERT и UPDATE. Эти операторы изменяют таблицы БД, но до момента времени t2 не фиксируют и не откатывают эти изменения. После момента t1 транзакция A считывает содержимое таблиц, измененных транзакцией B и «видит» измененные или добавленные строки. При этом изменения остаются до момента t2 в неподтвержденном состоянии, т. е. могут быть как зафиксированными, так и отмененными. 

Транзакция, выполняющаяся в рамках другой транзакции, называется вложенной.
	 оператор COMMIT вложенной транзакции действует только на внутренние операции вложенной транзакции; 
	 оператор ROLLBACK внешней транзакции отменяет зафиксированные операции внутренней транзакции; 
	 оператор ROLLBACK вложенной транзакции действует на операции внешней и внутренней транзакции, а также завершает обе транзакции; 
	 уровень вложенности транзакции можно определить с помощью системной функции @@TRANCOUT
